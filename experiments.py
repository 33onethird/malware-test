from argparse import ArgumentParser
from csv import writer
from os import mkdir
from os.path import isdir, isfile, join
from svm import load_observations, split_data, measure_performance
from time import time

train_pct = .8
algorithm = 'svm'
dump_directory = 'models'
models_path = 'models.csv'
if not isdir(dump_directory):
    mkdir(dump_directory)
x = load_observations()
x_tr, x_te, y_tr, y_te = split_data(x, train_pct)
del x
if algorithm == 'svm':
    from sklearn import svm
    from sklearn.externals.joblib import dump
    class_weights = {0: 1, 1: 2}
    s = svm.LinearSVC(tol=1e-5, C=1.5, class_weight=class_weights, max_iter=2000, verbose=1)
    s.fit(x_tr, y_tr)
    tpr, fpr = measure_performance(s, x_te, y_te)
    print('True positive rate', tpr, 'False positive rate', fpr)
    id = str(int(time()))
    if isfile(models_path):
        with open(models_path, 'a') as file:
            models_writer = writer(file)
            models_writer.writerow([id, str(s.C), str(s.tol), str(s.class_weight[0]), str(s.class_weight[1])])
    else:
        with open(models_path, 'w') as file:
            models_writer = writer(file)
            models_writer.writerow(['id', 'tpr', 'fpr', 'C', 'tol', 'positive_class_weight', 'negative_class_weights', 'max_iter'])
            models_writer.writerow([id, tpr, fpr, s.C, s.tol, s.class_weight[0], s.class_weight[1], s.max_iter])
    dump(s, join(dump_directory, id))
elif algorithm == 'nn':
    from keras.models import Sequential
    from keras.layers import Dense, Activation
    from keras.optimizers import Adam
    from matplotlib import pyplot as plt
    model = Sequential()
    model.add(Dense(200, input_dim=len(x_tr[0])))
    model.add(Activation('relu'))
    model.add(Dense(100))
    model.add(Activation('relu'))
    model.add(Dense(1))
    model.add(Activation('softmax'))
    adam = Adam(lr=1e-4, beta_1=.9, beta_2=.999, epsilon=1e-8, decay=.0)
    model.compile(loss='binary_crossentropy', optimizer=adam, metrics=['binary_accuracy'])
    history = model.fit(x_tr, y_tr, epochs=100, batch_size=8)
    loss_and_metrics = model.evaluate(x_te, y_te)
    plt.plot(history.history['loss'])
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.show()
    plt.plot(history.history['acc'])
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy')
    plt.show()
    print('Neural network accuracy:', loss_and_metrics[1])
