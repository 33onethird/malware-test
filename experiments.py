from argparse import ArgumentParser
from keras.models import Sequential
from keras.layers import Dense, Activation
from keras.optimizers import Adam
from matplotlib import pyplot as plt
from os import mkdir
from os.path import isdir
from svm import load_observations, split_data, measure_performance
from sklearn import svm
from sklearn.externals.joblib import dump

train_pct = .8
algorithm = 'svm'
dump_directory = 'models'
if not isdir(dump_directory):
    mkdir(dump_directory)
x = load_observations()
x_tr, x_te, y_tr, y_te = split_data(x, train_pct)
del x
if algorithm == 'svm':
    class_weights = {0: 1, 1: 2}
    s = svm.LinearSVC(tol=1e-5, C=1.5, class_weight=class_weights)
    s.fit(x_tr, y_tr)
    tpr, fpr = measure_performance(s, x_te, y_te)
    print('True positive rate', tpr, 'False positive rate', fpr)
    filename = algorithm + '_' + str(tpr)[:5] + '_' + str(fpr)[:5] + '.p'
    dump(s, filename)
elif algorithm == 'nn':
    model = Sequential()
    model.add(Dense(1000, input_dim=len(x_tr[0])))
    model.add(Activation('relu'))
    model.add(Dense(100))
    model.add(Activation('relu'))
    model.add(Dense(1))
    model.add(Activation('softmax'))
    adam = Adam(lr=1e-4, beta_1=.9, beta_2=.999, epsilon=1e-8, decay=.0)
    model.compile(loss='binary_crossentropy', optimizer=adam, metrics=['binary_accuracy'])
    history = model.fit(x_tr, y_tr, epochs=100)
    loss_and_metrics = model.evaluate(x_te, y_te)
    plt.plot(history.history['loss'])
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.show()
    plt.plot(history.history['acc'])
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy')
    plt.show()
    print('Neural network accuracy:', loss_and_metrics[1])
