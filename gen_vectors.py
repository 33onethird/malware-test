from argparse import ArgumentParser
from csv import reader
from math import ceil
from pickle import dump, load
from os import listdir, mkdir
from os.path import basename, isdir, join

directory = 'gen/observations'
observations_per_file = 1000
parser = ArgumentParser(description='Generates python vectors from string observations')
parser.add_argument('-o', '--observations', type=int, default=observations_per_file, help='Number of observations per '
                                                                                          'outputted file. The higher '
                                                                                          'the number, the higher the '
                                                                                          'memory requirements.')
parser.add_argument('-d', '--directory', type=str, default=directory, help='The directory which the output files '
                                                                           'should be written to.')
args = parser.parse_args()
directory = args.directory
observations_per_file = args.observations
if not isdir(directory):
    mkdir(directory)
with open('gen/features.p', 'rb') as file:
    features = load(file)
with open('labels.csv', 'r') as file:
    label_reader = reader(file)
    next(label_reader)
    positive_observations = []
    for row in label_reader:  # Without header row
        positive_observations.append(row[0])
paths = [join('feature_vectors', f) for f in listdir('feature_vectors')]
fill_nr = len(str(len(paths) // observations_per_file))
observations = []
for i in range(len(paths)):
    path = paths[i]
    print('Observation ' + str(i) + ' of ' + str(len(paths)), path)
    with open(path, 'r') as file:
        observation = []
        lines = file.read().splitlines()
        for feature in features:
            if feature in lines:
                observation.append(1)
            else:
                observation.append(0)
        if basename(path) in positive_observations:
            observation.append(1)
        else:
            observation.append(0)
        observations.append(observation)
    if (i + 1) % observations_per_file == 0:
        filename = str((i + 1) // observations_per_file).zfill(fill_nr) + '.p'
        with open(join(directory, filename), 'wb') as file:
            dump(observations, file)
        observations = []

filename = str(int(ceil(i / observations_per_file))) + '.p'
with open(join(directory, filename), 'wb') as file:
    dump(observations, file)
