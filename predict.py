#!/usr/bin/env python3
from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
from os import chdir, listdir, mkdir
from os.path import isdir, join, expanduser
from pickle import load as pickle_load
from shutil import rmtree
from subprocess import call

import numpy as np
from sklearn.externals.joblib import load

from gen_vectors import generate_vectors

algorithm = 'svm'
models_path = 'models'
extractor_path = '../FeatureExtractor'
gen_dir = expanduser('~/data/tmp')

parser = ArgumentParser(description='Predicts unlabelled apps', formatter_class=ArgumentDefaultsHelpFormatter)
parser.add_argument('-a', '--algorithm', type=str, default=algorithm, help='The algorithm to use for prediction',
                    choices=['svm'])
parser.add_argument('-m', '--models', type=str, default=models_path, help='The path to the algorithm models (output of '
                                                                          '`./experiments.py`)')
parser.add_argument('-d', '--data', type=str, help='The path to the original apk files to predict. The directory needs'
                                                   ' to include only valid .apk files')
parser.add_argument('-e', '--extractor', type=str, default=extractor_path, help='The path to the directory containing '
                                                                                'the feature extractor jar.')
args = parser.parse_args()
algorithm = args.algorithm
models_path = args.models
data = args.data
extractor_path = args.extractor
paths = sorted(listdir(join(models_path, algorithm)))
with open(join(models_path, algorithm, paths[-1]), 'rb') as file:
    model = load(file)
if not isdir(gen_dir):
    mkdir(gen_dir)
if not isdir(join(gen_dir, 'txt')):
    mkdir(join(gen_dir, 'txt'))
if not isdir(join(gen_dir, 'vec')):
    mkdir(join(gen_dir, 'vec'))
chdir(extractor_path)
result = call(['java', '-jar', 'FeatureExtractor.jar', data, join(gen_dir, 'txt')])
if result != 0:
    exit(result)
chdir('../malware-test')
generate_vectors(in_directory=join(gen_dir, 'txt'), out_directory=join(gen_dir, 'vec'), labels_path=None)
observations_paths = listdir(join(gen_dir, 'vec'))
observations = []
for path in observations_paths:
    with open(join(gen_dir, 'vec', path), 'rb') as file:
        observations += pickle_load(file)
observations = np.array(observations)
names = sorted(listdir(join(gen_dir, 'txt')))
rmtree(gen_dir)
result = model.predict(observations)
print('============')
print('Result')
print('============')
for i in range(len(result)):
    print(names[i], 'malware' if result[i] == 1 else 'benignware')
